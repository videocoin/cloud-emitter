syntax = "proto3";

package cloud.api.streams.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "streams/v1/stream.proto";

option go_package = "v1";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;

service StreamService {
    /* This API call creates a new stream with the specified name and output transcoding profile. A stream object is returned from this API call. */
    rpc Create(CreateStreamRequest) returns (StreamProfile) {
      option (google.api.http) = {
        post: "/api/v1/streams"
        body: "*"
      };
    };

    /* This API call gets the details of the stream associated with the ID passed. The stream must belong to the account specified */
    rpc Get(StreamRequest) returns (StreamProfile) {
      option (google.api.http) = {
        get: "/api/v1/streams/{id}"
      };
    };

    /* This API call deletes the stream with the specified ID. */
    rpc Delete(StreamRequest) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        delete: "/api/v1/streams/{id}"
      };
    };

    /* This API call gets all streams that belongs to a specific account. */
    rpc List(google.protobuf.Empty) returns (StreamProfiles) {
        option (google.api.http) = {
            get: "/api/v1/streams"
        };
    }

    /* This API call modify the stream with the specified ID. */
    rpc Update(UpdateStreamRequest) returns (StreamProfile) {
      option (google.api.http) = {
        put: "/api/v1/streams/{id}"
        body: "*"
      };
    };

    rpc UpdateStatus(UpdateStreamRequest) returns (google.protobuf.Empty) {};

    /* This API call transitions a newly created stream to begin preparing input and output destinations. */
    rpc Run(StreamRequest) returns (StreamProfile) {
      option (google.api.http) = {
        post: "/api/v1/streams/{id}/run"
      };
    };

    /* This API call stops or cancels a stream based on its input and output destination state. */
    rpc Stop(StreamRequest) returns (StreamProfile) {
      option (google.api.http) = {
        post: "/api/v1/streams/{id}/stop"
      };
    };
}

message CreateStreamRequest {
    string name = 1 [
      (gogoproto.moretags) = "validate:\"required,gt=0,lte=255\""
    ];

    string profile_id = 2 [
      (gogoproto.moretags) = "validate:\"required\""
    ];
}

message StreamRequest {
  string id = 1;
  uint64 stream_contract_id = 2;
}

message UpdateStreamRequest {
  string id = 1;
  string name = 2 [
    (gogoproto.moretags) = "validate:\"required,gt=0,lte=255\""
  ];
  uint64 stream_contract_id = 3;
  string stream_contract_address = 4;
  StreamStatus status = 5;
  InputStatus input_status = 6;
}
